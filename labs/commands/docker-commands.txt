#Docker Windows
Launch Docker Quicksart Terminal (From shortcut in Desktop OR Windows Programs)

#Docker Mac
Launch Docker App 	=> Starts Docker Daemon
Open Terminal => Run docker commands
screen ~/Library/Containers/com.docker.docker/Data/vms/0/tty	=> Connects to Docker Daemon VM
docker run -it --privileged --pid=host justincormack/nsenter1	=> Alternative to connect to Docker Daemon VM

#Working with Docker
docker version											(=> Docker version)
docker info												(=> Docker details)
docker image ls											(=> Lists images)
docker ps												(=> Lists active containers)
docker ps -as											(=> Lists all containers)
docker run <image path> <optional args>					(=> Starts container)
docker run -e "env_var_name=another_value" <image id>	(=> Start container with environmental variables)
docker stop <container id/name>							(=> Stop container)
docker rm <container id/name>							(=> Remove container)
docker image rm <image id/name>							(=> Remove image)
docker pull <image id/name>								(=> Pull image from Hub)
docker inspect <containerid>							(=> List docker container detail)
docker exec -it <container name> /bin/bash				(=> Connect to running container in bash mode)
docker exec -it <container name> /bin/sh				(=> Connect to running container in sh mode)
docker commit <container name> <imagename>				(=> Commits container changes into an image)
docker build <dockerfilepath> <target image path>		(=> Build image from Dockerfile)
docker build --build-arg JAR_FILE=a_value .				(=> Build image with command line args)
docker build -t hello-world-docker --build-arg JAR_FILE=./target/*.jar .		(=> Build image with command line args)

#Ngnix
docker run --detach --publish=80:80 --name=webserver nginx
docker run -d -p 80:80 --name=webserver nginx
docker run -d -p 81:80 --name=webserver1 nginx
docker run -d -P --name=webserver2 nginx

#Mysql
docker run -d -p 3306:3306 --name mysqldb -e MYSQL_ROOT_PASSWORD=password mysql
docker run -d -p 8080:8080 adminer

#Jenkins Docker image setup Example
docker pull jenkins
docker run -p 8080:8080 -p 50000:50000 jenkins
3df307ca21874a66a0d10a8a9c3bb8		(=> Auth key)

#RabbitMQ
docker run -d --hostname my-rabbit --name rabbit-mq -p 8080:15672 rabbitmq:3-management

#Save Image to Disk
docker save -o images.tar image1 [image2 ..]
docker save -o nginx-image.tar nginx

#Load Image from Disk
docker load -i images.tar
docker load -i nginx-image.tar

#Export Container to Disk (exports container image)
docker export -o myContainner1.tar container1
docker export -o nginx-container.tar webserver

#Import Container Image from Disk
docker import myContainer1.tar image1
docker import nginx-container.tar  nginx			(updates existing nginx image)
docker import nginx-container.tar  nginx-updated	(creates new nginx image)

#Delete image
docker image rm <imageid>
docker image rm <imageid>
docker rmi <imageid>

##Hello World Docker Example
docker build -t hello-world-docker:latest .
docker run -p 8080:8080 --name="hello-world-docker" hello-world-docker

##Hello World Docker Example with build argument
docker build -t hello-world-docker:latest --build-arg JAR_FILE=./target/*.jar .

##Hello World Docker Example with environmental variable
docker run -p 8090:9090 -e "SERVER_PORT=9090" hello-world-docker

#Login to DockerHub
docker login

#Tag image
docker tag <sourceimage:tag> <targetimage:tag>

docker tag hello-world-docker dockrtraining/hello-world-docker

#Push image to DockerHub Registry
docker push username/repository:tag

docker push dockrtraining/hello-world-docker

#Pull image from DockerHub Registry
docker pull dockrtraining/hello-world-docker

#List Docker Images
docker image ls

#Run Docker image
docker run -p 8080:8080 username/repository:tag

docker run -p 8080:8080 --name hello-docker dockrtraining/hello-world-docker

#Logout from DockerHub
docker logout

##Storage
##bind mount
#bind mount (with --mount option)
docker run -d --name bindtest --mount type=bind,source=/home/docker,target=/app nginx:latest

#bind mount (with -v option)
docker run -d --name bindtest -v /home/docker:/app nginx:latest

#verify that mount is a bind mount
docker container inspect bindtest			(=> check Mounts section)
docker exec -it bindtest bash				(=> check dir /app, write some data and stop/start container n verify)

##volumes
#volume mount (with --mount option)
docker run -d --name voltest --mount source=testvol,target=/app nginx:latest

#volume mount (with -v option)
docker run -d --name voltest -v testvol:/app nginx:latest

#verify that mount is a volume
docker container inspect voltest			(=> check Mounts section)
docker exec -it voltest bash				(=> check dir /app, write some data and stop/start container n verify)

##tmpfs
#temp mount with --mount option
docker run -d --name tmptest --mount type=tmpfs,destination=/app nginx:latest

#temp mount with --tmpfs option
docker run -d --name tmptest --tmpfs /app nginx:latest

#temp mount with volume option
docker volume create --driver local --opt type=tmpfs --opt device=tmpfs temp
docker run -d --name tmptest1 -v temp:/app nginx:latest

#verify that mount is a tmpfs mount
docker container inspect tmptest			(=> check Mounts section)
docker exec -it temptest bash				(=> check dir /app, write some data and stop/start container n verify)