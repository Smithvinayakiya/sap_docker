Docker
	- Introduction
	- Virtual Machine vs Container
	- What is Docker
	- Docker Architecture
	- Docker Engine
	- Docker Components
		- Image		=> read only template to create containers. Build and Ship. ~JAR
		- Container => running instance of image. Can run one or more containers from an image. Run JAR -> JVM -> mem /resources
		- Registry (Local [/var/lib/docker] | Public (Docker Hub) | Private => Nexus | Artifactory)
		- Docker Server (Daemon) (dockerd)
		- Docker Client	
			- CLI
			- REST API
			- SDK
			- Plugins/Extentions
		- Docker Compose => enables to run multiple docker containers in single unit
		- Docker Swarm | Kubernetes	 => container management platform / orchestration platform
		  
	- Docker Installation and Setup
		- Docker Desktop for Windows (10 Prof/Entp)
		- Docker for Windows 7 => Docker Toolbox
		- Docker for Linux
		- Docker for Mac
		- Docker Community Edition vs Docker Enterprise Edition
		- Docker Enterprise sold to Mirandis (2019)
	- Docker CLI
		- docker basic commands
		- docker image
		- docker container
			
	- Dockerfile
		step 1: install base os
		step 2: install nodejs / java
		step 3: copy application build code
		step 4: npm start | java -jar app.jar
		step 5: expose ports - 3000
		
		
	- Build Docker Image
	- Launch Docker Container
	
	- Export/Import Docker Image locally
	- Export/Load Docker Container locally
	
	- Working with Public Registry
		- Create Account in https://hub.docker.com
		- Docker Login
		- Tag Image and Push Image
		- Docker Logout
		
	- Connect to Running Docker Container
	- Make changes in Container and Commit
		
	- Eclipse Docker Tooling plugin
	
	- Docker Compose
	
	- Dockerizing microservices (ShoppingCart)

Appendix:
	
	- Docker Storage Drivers
		- Overlay2
		- AUFS
		- Devicemapper
		- Btrfs
		- ZFS		
		 
	- Docker Volumes
		- bind mount	=> persist the data into host file system. source directory should be created and available.
		- volumes		=> persist the data into docker storage area within host machine. managed by docker.
		- tmpfs mount	=> temporarily persist data into host memory. tmpfs mount removed once container stops.
		
	- Docker Networking
		- bridge	=> best when you need multiple containers to communicate on the same Docker host
		- host		=> best when the network stack should not be isolated from the Docker host, but you want other aspects of the container to be isolated
		- overlay	=> best when you need containers running on different Docker hosts to communicate using Swarm services
		- macvlan	=> best when you are migrating from a VM setup or need your containers to look like physical hosts on your network, each with a unique MAC address
		- none		=> no networking
	
	- Docker Linking (Deprecated)
	
	- Docker Swarm